########################## Approx. ranges to keep in mind for avoiding overflow ####################
-10^9 < int < 10^9
-10^12 < long int < 10^12
-10^18 < long long int < 10^18

########################## Why use str.push_back() instead of str+='c' ####################
- str.push_back() is an O(1) operation whereas str+='c' creates a copy of str, add 'c' to it, and then places that copy in str, so it becomes an O(n) operation.

################## Why declaring a local array of size 1e7 gives segmentation fault and global does not ################
- Local variables are stored in stack and stack memory has a size limit of 8mb (depends on the machine), and global variables are stored in a Data segment, which does not have any memory limit as such. (in online programming contests, you cannot declare arrays bigger than size of 1e7)

################## Modular Arithmetics #################
1. (a+b)%M = a%M + b%M
2. (a*b)%M = (a%M * b%M)%M
3. (a-b)%M = (a%M - b%M + M)%M
4. (a/b)%M = (a%M * (b^-1)%M)%M   // Here b^-1 => modular inverse of b



############### Significance of 10^9+7 ###############
1. Very close to integer maximum
2. It is a prime number itself so we can calculate multiplicative inverse




############### Precomputation Techniques ##############
1. Hashing 
2. Prefix Sum
*********************** Precomputation in 2D array ************************
The question is that you are a given a 2D integer array with non-negative values in cells and you are given Q queries where in each query you'll be given two cells and you have to return the value of sum of all the elements present in the formed rectangle when those two cells are kept opposite to each other. The brute force will be to take each query, find the sum of rectangle and return, but then the complexity would be O(Q*N^2). To optimize, we will use precomputation. So we construct another 2D array with one row and one column extra, and in this matrix, every cell [x, y] stores the sum of cells in the rectangle formed by cell [0, 0] and [x, y] {Note: Matrix given in question follows 1-based indexing and so are we, the [0,0] lines are extra to avoid out of bound values}. Let the matrix in question be:
1 2 1
2 1 1
3 1 2

So our precomputed matrix will be:
0 0 0 0
0 1 3 4
0 3 6 8
0 6 10 14
The first row and first column will be filled with zeroes in this matrix, and to get the value of any other cell [x, y], use 
[x, y] = [x, y] + [x-1, y] + [x, y-1] - [x-1, y-1]
Draw a matrix and calculate some values to get more clarity.

Now, to answer a query [l1, l2] [r1, r2] (r -> right, l -> left), we use the following formula:
ans = [r1, r2] - [r1-l1, r2] - [r1, r2-l2] + [l1-1, l2-1] 
For instance, the query is [2, 2] [3, 3], then ans would be
ans = [3, 3] - [1, 3] - [3, 1] + [1, 1]

********************* Question on Hashing and prefix sum *******************
You are given a string of length N, and Q queries of the form (l, r), where you have to take the letters from index l to r (inclusive) and find if they can be rearranged to form a palindrome.
Approach: An odd length palindrome consists of one letter with odd count and an even length palindrome has no letters with odd count, we will get the count of each letter in l to r and check if more 1 letter has odd count, and if there are, then they can't form a palindrome, else they can. For every character in a to z, we'll construct two arrays of size N, one will tell the positions where this character is found in the given string, and other will be prefix sum of this position array. Basically, at any index, the second array will give the number of occurences of that character till that index.
For instance, if the string is 'abaaddae', so the two constructed arrays for 'a' would be:
1 0 1 1 0 0 1 0
1 1 2 3 3 3 4 4
We will construct these arrays for every character in a to z. After we have that, for a given query l to r, we can simply get the count of every character in l to r using the formula
cnt = secondArray[r] - secondArray[l-1]
And then we will check if more than one character has odd count.




####################### C++ STL #####################
It can be divided into 4 parts:
*******CONTAINERS*******
* Sequential: Vectors, Stack, Queue, Pair (not a container)
* Ordered: Maps, Multimaps, Set, Multiset
NOTE: In a multiset s, s.find('abc') returns an iterator point to the first occurrence of 'abc', s.erase(it) will delete the occurrence this iterator 'it' is pointing to, whereas s.erase('abc') will delete all the occurences of 'abc'
* Unordered: Unordered map, unordered set
*******ITERATORS*******
* points to memory address of containers
* continuous for containers like vectors, and discontinuous for containers like maps
* NOTE: If 'it' is an iterator, then it+1 and it++ have different meanings, it++ means next iterator and it+1 means next location, in vectors both are same but in data structures like maps and sets, it+1 is invalid and it++ is used to get to the next element.

*******ALGORITHMS******
* upper_bound
* lower_bound
* sort (comparator)
* max_element
* min_element
* accumulate
* reverse
* count
* find
* next_permutations
* prev_permutations


####################### INBUILT SORT IN STL #####################
* sort() takes two parameters as input, first is the address from which sorting should start and second is the address next to the address at which sorting should end. For instance, if an array has n elements, and its starting address is 'arr', so the ending address would be 'arr+n-1', and to sort it entirely we will use sort(a, a+n).
* The inbuilt sorting algorithm used in STL is called IntroSort, which is a combination of 3 sorting algorithms, Quick Sort, Heap Sort and Insertion sort. It starts sorting with quick sort, and if the recursion depth increases, it switches to heap sort and if the number of elements are very less, it switches to insertion sort.
* The inbuilt comparator function's default behaviour states that if you wish to swap then return false, else return true. For instance:

bool cmp(pair<int, int> a, pair<int, int> b){
	if(a.first!=b.first)
		return a.first<b.first;
	return a.second>b.second;


################### lower_bound() and upper_bound() in STL #################
* Both work in a sorted array with O(log(N)) TC, and with O(N) complexity in an unsorted array. It is always advised to use them with sorted array.
* lower_bound(x) will return the position of x if x is present, else it will return the position of element just greater than x.
* upper_bound(x) always returns the position of element just greater than x.
* Basically in lower_bound() the element itself is included in the search and in upper_bound() it is excluded.
* Both return the location, i.e., a pointer in case of an array, and an iterator in case of a vector.
* Both take 3 parameters, first is the address from which search should begin, second is address next to the address where the search should end, and third is the value to be searched. For instance, lower_bound(arr, arr+n, 5)
* In case of sets and maps, don't use lower_bound(s.begin(), s.end(), 5), it will work but with O(N) TC, instead use s.lower_bound(5).


################ Lambda Functions ################
* Before that, know about 3 functions: all_of, any_of, none_of
All these functions return a Boolean value (true or false). The take starting address, address next to ending address, and a condition, and then check that condition on every element and return true or false.
* Syntax: [](int x, int y){return x+y;}   --> This is a basic Lambda Function which calculates sum of 2 numbers, similarly we can write any function. For instance, we need to check if all the elements are positive in a given vector v, we can write 
all_of(v.begin(), v.end(), [](int x){ return x>0; }


NOTE: There are two types of queries in CP questions, offline queries, in which there are no updates, for instance, we need to find the sum of arr[l] to arr[r], and online queries, in which updates are involved, for instance, we need to update the value of a[i] to x and then we need to find the sum.

############## Nth root using Binary Search #############
* We need to find the square root of X, so our search space would be from 1 to X, that means initially our low will be 1 and high will X, then we'll calculate mid, and check if mid*mid<X and if it is, we do high = mid, else we do low = mid. Similar process is followed with decimal values, here we use an epsilon (precision value) instead of 1, just have a look at the code and you'll get it.

#include <bits/stdc++.h>
using namespace std;

double eps = 1e-6; // precision value

double multiply(double mid, int n)
{
    double ans = 1;
    for (int i = 0; i < n; i++)
        ans *= mid;
    return ans;
}

double nroot(double x, int n)
{
    double low = 1, high = x;
    while (high - low > eps)
    {
        double mid = (low + high) / 2;
        if (multiply(mid, n) < x)
            low = mid;
        else
            high = mid;
    }
    return low;
}
int main()
{
    double n, x;
    cout << "Enter a number: ";
    cin >> x;
    cout << "Enter the value of n for nth root: ";
    cin >> n;
    cout << "Ans is " << setprecision(6) << nroot(x, n) << "\n";
    return 0;
}



























