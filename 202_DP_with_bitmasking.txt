################## INTRODUCTION #################
# Suppose we need to store a subset of a set of size N containing integers from 0 to N-1, so either we can use a set<int> or vector<int> to store the subset, but it can be done more efficiently by creating a vector<bool> of size N and storing true for indices present and false for the ones that are not present. 
# To optimize it even further, we can store that subset as an integer of N bits, where i'th bit being 0 implies that element 'i' is not present in the subset and being 1 implies it is present. This is called BITMASKING.

################# ADD, REMOVE AND DISPLAYING ELEMENTS OF SUBSET ################
# 'subset' is the integer storing a subset of a set of 'n' elements.

void display(int& subset, int n){
	for(int i=0; i<n; i++){
		if(subset&(1<<i)) cout<<i<<" ";
	}
}

void add(int& subset, int addValue){
	subset^=(1<<(addValue-1)); // We are assuming that the value is not already present in the subset.
}

void remove(int& subset, int removeVal){
	subset^=(1<<(addValue-1)); // We are assuming that the value is present in the subset.
}

################# N workers and N jobs problems ###############
Problem Statement: Let there be N workers and N jobs. Any worker can be assigned to perform any job, incurring some cost that may vary depending on the work-job assignment. It is required to perform all jobs by assigning exactly one worker to each job and exactly one job to each agent in such a way that the total cost of the assignment is minimized.

Input Format:
Number of workers and job: N
Cost matrix C with dimension N*N where C(i,j) is the cost incurred on assigning ith Person to jth Job.

Sample Input
4

[
9 2 7 8
6 4 3 7
5 8 1 8
7 6 9 4
]

Sample Output
13

Constraints
N <= 20

BRUTE FORCE APPROACH: One method is to try every permutation of jobs and workers and calculate the cost for each and track the minimum cost. Its time complexity will be O(N!), as we will be trying N! combinations.

OPTIMAL APPROACH: Consider (1, {P1, P2, P3, ..... , PN}), it means that we need to get 1 -> N jobs done and we have the following persons available, and we can give the first job to any of the available persons and it will incur its respective cost C[i][j], and this person won't be available anymore for the next jobs. We consider every combination, and we will have overlapping subproblems, so we use DP. To store the persons available, we use bitmasking. We store dp(i, mask) which gives minimum cost of assigning job i->N where available persons are given by mask. If i'th bit is 0 in the mask then it implies that (i+1)'th person is not available for the job and vice versa. Now, to assign a job to i'th person, we first check whether the i'th person is available by using & with 1<<i and then we assign the by using ^ with 1<<i;

int solve(int i, int mask, int& n)
{
    if(i == n)
        return 0;
 
    if(dp[i][mask] != -1)
        return dp[i][mask];
 
    int answer = INT_MAX;
    for(int j = 0; j < n; j++)
    {
        if(mask&(1<<j))
            answer = min(answer, cost[j][i] + solve(i+1, (mask^(1<<j)), n));
    }
 
    return dp[i][mask] = answer;
}

TC: O(N^2 * 2^N)    SC: O(N * 2^N)


################### TRAVELLING SALESMAN PROBLEM #################
PS: Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each of city and returns to the origin city.

BRUTE FORCE APPROACH: For the first city we have N-1 options to choose from, then from the second one we'll have N-2 and so on, and it will create a O((N-1)!) solution or O(N!). Here, when we reach the base case, we add the distance from that last city to our origin to the answer and return it, and then simply return the minimum of all the found answers.

OPTIMAL APPROACH: Initially, we are standing at city 0 and we need to visit the cities {1, 2, ... , n-1} and now we have n-1 choices to go to and we take the minimum of them, and obviously we'll have overlapping sub problems, so we define dp[i][{S}] where i is the city we are currently and {S} is the set of all the cities that we need to visit, represented using a bitmask.
dp[i][{S}] = minimum distance needed to travel to city i and you need to visit {S} and get back to 1. Our final ans will be dp[0][{1, 2,..., n-1}].
Recurrence relation: dp[i][{S}] = dist(i, j) + dp(j, S-{j}), we will take the minimum among all the valid j
TC: O(N^2 * 2^N)    SC: O(N * 2^N)

################ SHORTEST PATH VISITING ALL NODES ################
PS: You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge. Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

UNDERSTANDING THE PROBLEM: 
Consider this graph 
                   0
                  /|\
                 / | \
                1  2  3

Here, if we start from 0, we might go like 0->1->0->2->0->3 to visit all the nodes and the length of path will be 5, and if we start from 1, we might go like 1->0->2->0->3 to visit all the nodes and the length of the path will be 4. So we deduce that starting from different nodes will give us different path lengths, and hence we need to do bfs on the graph starting from every node and return the minimum path length. 

Now the problem is that we can visit every node more than once, so we cannot use a visited array in this case, but still we will have an unique quality in our traversal, that is from the node where we come from and the node where we arrive at will be unique in our traversal. That is, if once we went from 0 to 1, we won't go from 0 to 1 again, but we can go from 1 to 0.

To keep track of this, we can store a node along with the set all the nodes we've visited while being at that node. For instance, if we start from 0, initially we will store (0, {0}) and then if we go to one we will store (1, {0, 1}) and then if we come back to 0, we store (0, {0, 1}), and this way we are tracking the unique quality of our bfs. Now, this set of visited nodes is basically a subset of all the nodes present in the graph, so we will use a bitmask to store that, where i'th bit being 1 will mean that the i'th node is visited.

CODE:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        if(n<=1) return 0;
        queue<pair<int, int>> q;
        int pathLen = 0, allVisited = (1<<n)-1;
        vector<vector<bool>> vis(n, vector<bool>(allVisited+1, 0));
        for(int i=0; i<n; i++){
            int mask = 1<<i;
            q.push({i, mask});
            vis[i][mask] = 1;
        }
        while(!q.empty()){
            pathLen++;
            int size = q.size();
            while(size--){
                int currNode = q.front().first;
                int currMask = q.front().second;
                q.pop();
                for(int& nbr: graph[currNode]){
                    int nextMask = currMask|(1<<nbr);
                    if(nextMask == allVisited) return pathLen;
                    if(!vis[nbr][nextMask]){
                        q.push({nbr, nextMask});
                        vis[nbr][nextMask] = 1;
                    }
                }
            }
        }
        return -1;
    } 




#################### CODEFORCES DIV 2E: FISH #################
n fish, numbered from 1 to n, live in a lake. Every day one pair of fish meet, and the probability of each other pair meeting is the same. If two fish with indexes i and j meet, the first will eat up the second with the probability aij, and the second will eat up the first with the probability aji = 1 - aij. The described process goes on until there are at least two fish in the lake. For each fish find out the probability that it will survive to be the last in the lake.

APPROACH:
Lets consider the probability of fish 1 dying on day 1, that means out of all the fish pairs, only the ones containing 1 should have been selected and 1 should lose in them. Since total number of pairs will be nC2, and probability of pair {1, 2} getting selected will be 1/nC2 and probability of 1 losing that fight will be prob[2][1], similarly for {1, 3} it will be 1/nC2 and prob[3][1], so to calculate the total probability, we add all the probs({1, 2} + {1, 3} + ... + {1, n}) and then divide it by nC2.

Now we will go reverse on this approach, that is first we will select a fish that must survive till the last day, then we select a fish that must've died the previous day, and calculate the probability that fish dying on that day and do this with all the fishes that might've survived on that day. To generalize it more, suppose on a day there a k fishes alive, that means some j'th fish must've died a day before, so we calculate the probability of all such fishes dying on that day to get the probability of our k fishes to survive. To calculate that probability, first we need the probability of all those fishes being alive on that day, which we will get using recursion and DP and then we will calculate the probability of moving from this state to our desired state, by killing all the fishes that could've died and summing their probabilities. 
Go through the code to understand better.

CODE:
#include <bits/stdc++.h>
using namespace std;

int countSetBits(int n)
{
	int cnt = 0;
	while (n != 0)
	{
		n &= (n - 1);
		cnt++;
	}
	return cnt;
}

double probToMove(int prevDayMask, int fishToDie, int n, vector<vector<double>> &prob)
{
	int k = countSetBits(prevDayMask); // No. of fishes alive
	double kC2 = k * (k - 1) / 2; // Total number of pairs
	double moveProb = 0;
	for (int fish = 0; fish < n; fish++) // This represents the fish our fishToDie will fight with
	{
		if ((1 << fish) & prevDayMask) // fish should be alive to fight
			moveProb += (prob[fish][fishToDie]); // If fish and fishToDie are same, prob will be 0, so its not an issue
	}
	return moveProb / (1.0 * kC2);
}
double solve(int bitMask, int &n, vector<double> &dp, vector<vector<double>> &prob)
{
	int alive = countSetBits(bitMask); // No. of fishes alive 
	if (alive == n)
		return 1; // If all the fishes are alive, then its day 1 and its probability is 1
	if (dp[bitMask] > -0.9)
		return dp[bitMask];
	double ans = 0;
	for (int fish = 0; fish < n; fish++) // This represents the fishToDie, the fishes that are still alive will not be considered
	{
		if (!(bitMask & (1 << fish))) // This is to check if the fish already dead, coz then only it would've been alive a day before
		{
			int prevDayMask = bitMask ^ (1 << fish); // BitMask represent the fishes alive a day before
			double prevDayProb = solve(prevDayMask, n, dp, prob); // Probability of reaching this state
			ans += prevDayProb * probToMove(prevDayMask, fish, n, prob); // Our ans will be prob of this state multiplied by prob of moving from this state to desired state
		}
	}
	return dp[bitMask] = ans;
}

signed main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	vector<vector<double>> prob(n, vector<double>(n));
	vector<double> dp((1 << n), -1);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
			cin >> prob[i][j];
	}
	for (int fish = 0; fish < n; fish++)
	{
		cout << (double)solve((1 << fish), n, dp, prob) << " "; // Probability that this fish will survive till the end.
	}
	return 0;
}



















	